import TokenType from './TokenType';

const tokenValueToTypeMap = new Map<string, TokenType>([
  //#region Preprocessor
    ['#', TokenType.preproHash],
    // Macros
      ['__FILE__', TokenType.preproMacroFile],
      ['__LINE__', TokenType.preproMacroLine],
      ['__DATE__', TokenType.preproMacroDate],
      ['__TIME__', TokenType.preproMacroTime],
      ['__TIMESTAMP__', TokenType.preproMacroTimestamp],
  //#endregion Preprocessor

  //#region Keywords
    // Types
      ['_Bool', TokenType.keywordBool],
      ['char', TokenType.keywordChar],
      ['double', TokenType.keywordDouble],
      ['float', TokenType.keywordFloat],
      ['int', TokenType.keywordInt],
      ['long', TokenType.keywordLong],
      ['short', TokenType.keywordShort],
      ['signed', TokenType.keywordSigned],
      ['void', TokenType.keywordVoid],
      // Qualifiers
        ['_Atomic', TokenType.keywordAtomic],
        ['const', TokenType.keywordConst],
        ['restrict', TokenType.keywordRestrict],
        ['volatile', TokenType.keywordVolatile],
    // Other
      ['_Alignas', TokenType.keywordAlignas],
      ['_Alignof', TokenType.keywordAlignof],
      ['auto', TokenType.keywordAuto],
      ['auto', TokenType.keywordAuto],
      ['break', TokenType.keywordBreak],
      ['case', TokenType.keywordCase],
      ['_Complex', TokenType.keywordComplex],
      ['continue', TokenType.keywordContinue],
      ['default', TokenType.keywordDefault],
      ['do', TokenType.keywordDo],
      ['else', TokenType.keywordElse],
      ['enum', TokenType.keywordEnum],
      ['extern', TokenType.keywordExtern],
      ['for', TokenType.keywordFor],
      ['_Generic', TokenType.keywordGeneric],
      ['goto', TokenType.keywordGoto],
      ['if', TokenType.keywordIf],
      ['inline', TokenType.keywordInline],
      ['_Imaginary', TokenType.keywordImaginary],
      ['_Noreturn', TokenType.keywordNoreturn],
      ['register', TokenType.keywordRegister],
      ['return', TokenType.keywordReturn],
      ['sizeof', TokenType.keywordSizeof],
      ['static', TokenType.keywordStatic],
      ['_Static_assert', TokenType.keywordStaticassert],
      ['struct', TokenType.keywordStruct],
      ['_Thread_local', TokenType.keywordThreadlocal],
      ['switch', TokenType.keywordSwitch],
      ['typedef', TokenType.keywordTypedef],
      ['union', TokenType.keywordUnion],
      ['unsigned', TokenType.keywordUnsigned],
      ['while', TokenType.keywordWhile],
  //#endregion Keywords

  //#region Operators
    // Unary
      // Arithmetic
        ['~', TokenType.operatorUnaryBitwiseOnesComplement],
      // Logical
        ['!', TokenType.operatorUnaryLogicalNegation],
    // Binary
      // Arithmetic
        ['/', TokenType.operatorBinaryArithmeticDivision],
        ['%', TokenType.operatorBinaryArithmeticModulo],
      // Comparison
        ['==', TokenType.operatorBinaryComparisonEqualTo],
        ['!=', TokenType.operatorBinaryComparisonNotEqualTo],
        ['>', TokenType.operatorBinaryComparisonGreaterThan],
        ['>=', TokenType.operatorBinaryComparisonGreaterThanOrEqualTo],
        ['<', TokenType.operatorBinaryComparisonLessThan],
        ['<=', TokenType.operatorBinaryComparisonLessThanOrEqualTo],
      // Logical
        ['&&', TokenType.operatorBinaryLogicalAnd],
        ['||', TokenType.operatorBinaryLogicalOr],
      // Bitwise
        ['|', TokenType.operatorBinaryBitwiseOr],
        ['^', TokenType.operatorBinaryBitwiseXor],
        ['<<', TokenType.operatorBinaryBitwiseShiftLeft],
        ['>>', TokenType.operatorBinaryBitwiseShiftRight],
      // Assignment
        ['=', TokenType.operatorBinaryAssignmentDirect],
        ['+=', TokenType.operatorBinaryAssignmentAddition],
        ['-=', TokenType.operatorBinaryAssignmentSubtraction],
        ['*=', TokenType.operatorBinaryAssignmentMultiplication],
        ['/=', TokenType.operatorBinaryAssignmentDivision],
        ['%=', TokenType.operatorBinaryAssignmentModulo],
        ['<<=', TokenType.operatorBinaryAssignmentBitwiseShiftLeft],
        ['>>=', TokenType.operatorBinaryAssignmentBitwiseShiftRight],
        ['&=', TokenType.operatorBinaryAssignmentBitwiseAnd],
        ['|=', TokenType.operatorBinaryAssignmentBitwiseOr],
        ['^=', TokenType.operatorBinaryAssignmentBitwiseXor],
    // Other
      ['.', TokenType.operatorMemberSelectionDirect],
      ['->', TokenType.operatorMemberSelectionIndirect],
      ['?', TokenType.operatorTernaryQuestion],
      ['...', TokenType.operatorEllipses],
  //#endregion Operators

  //#region Special
    [',', TokenType.specialComma],
    [';', TokenType.specialSemicolon],
    ['\\', TokenType.speicalLineContinuation],
    // Opening
      ['(', TokenType.specialParenthesisOpening],
      ['{', TokenType.specialBraceOpening],
      ['[', TokenType.specialBracketOpening],
    // Closing
      [')', TokenType.specialParenthesisClosing],
      ['}', TokenType.specialBraceClosing],
      [']', TokenType.specialBracketClosing],
  //#endregion Special

  //#region Ambiguous
    ['+', TokenType.ambiguousPlus],
    ['-', TokenType.ambiguousMinus],
    ['++', TokenType.ambiguousIncrement],
    ['--', TokenType.ambiguousDecrement],
    ['*', TokenType.ambiguousAsterisk],
    ['&', TokenType.ambiguousAmpersand],
    [':', TokenType.ambiguousColon],
  //#endregion Ambiguous
]);

export default tokenValueToTypeMap;

import TokenType from './TokenType';

export const tokenSpecialValueToTypeMap = new Map<string, TokenType>([
  [',', TokenType.specialComma],
  [';', TokenType.specialSemicolon],
  ['[', TokenType.specialBracketLeft],
  [']', TokenType.specialBracketRight],
  ['(', TokenType.specialParenLeft],
  [')', TokenType.specialParenRight],
  ['{', TokenType.specialBraceLeft],
  ['}', TokenType.specialBraceRight],
]);

export const tokenPreprocessorValueToTypeMap = new Map<string, TokenType>([
  ['#include', TokenType.preproDirectiveInclude],
  ['#define', TokenType.preproDirectiveDefine],
  ['#undef', TokenType.preproDirectiveUndef],
  ['#if', TokenType.preproDirectiveIf],
  ['#ifdef', TokenType.preproDirectiveIfdef],
  ['#ifndef', TokenType.preproDirectiveIfndef],
  ['#error', TokenType.preproMacroError],
  ['__FILE__', TokenType.preproMacroFile],
  ['__LINE__', TokenType.preproMacroLine],
  ['__DATE__', TokenType.preproMacroDate],
  ['__TIME__', TokenType.preproMacroTime],
  ['__TIMESTAMP__', TokenType.preproMacroTimestamp],
  ['#pragma', TokenType.preproDirectivePragma],
]);

export const tokenKeywordValueToTypeMap = new Map<string, TokenType>([
  ['_Alignas', TokenType.keywordAlignas],
  ['alignas', TokenType.keywordAlignof],
  ['auto', TokenType.keywordAuto],
  ['_Atomic', TokenType.keywordAtomic],
  ['atomic', TokenType.keywordAtomic],
  ['_Bool', TokenType.keywordBool],
  ['bool', TokenType.keywordBool],
  ['auto', TokenType.keywordAuto],
  ['break', TokenType.keywordBreak],
  ['case', TokenType.keywordCase],
  ['char', TokenType.keywordChar],
  ['_Complex', TokenType.keywordChar],
  ['complex', TokenType.keywordChar],
  ['const', TokenType.keywordConst],
  ['continue', TokenType.keywordContinue],
  ['default', TokenType.keywordDefault],
  ['do', TokenType.keywordDo],
  ['double', TokenType.keywordDouble],
  ['else', TokenType.keywordElse],
  ['enum', TokenType.keywordEnum],
  ['extern', TokenType.keywordExtern],
  ['float', TokenType.keywordFloat],
  ['for', TokenType.keywordFor],
  ['_Generic', TokenType.keywordGeneric],
  ['generic', TokenType.keywordGeneric],
  ['goto', TokenType.keywordGoto],
  ['if', TokenType.keywordIf],
  ['_Imaginary', TokenType.keywordImaginary],
  ['imaginary', TokenType.keywordImaginary],
  ['int', TokenType.keywordInt],
  ['long', TokenType.keywordLong],
  ['_Noreturn', TokenType.keywordNoreturn],
  ['noreturn', TokenType.keywordNoreturn],
  ['register', TokenType.keywordRegister],
  ['return', TokenType.keywordReturn],
  ['short', TokenType.keywordShort],
  ['signed', TokenType.keywordSigned],
  ['sizeof', TokenType.keywordSizeof],
  ['static', TokenType.keywordStatic],
  ['_Static_assert', TokenType.keywordStaticassert],
  ['static_assert', TokenType.keywordStaticassert],
  ['struct', TokenType.keywordStruct],
  ['_Thread_local', TokenType.keywordThreadlocal],
  ['thread_local', TokenType.keywordThreadlocal],
  ['switch', TokenType.keywordSwitch],
  ['typedef', TokenType.keywordTypedef],
  ['union', TokenType.keywordUnion],
  ['unsigned', TokenType.keywordUnsigned],
  ['void', TokenType.keywordVoid],
  ['volatile', TokenType.keywordVolatile],
  ['while', TokenType.keywordWhile],
]);

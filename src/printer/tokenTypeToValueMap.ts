import TokenType from '../lexer/TokenType';

const tokenTypeToValueMap = new Map<TokenType, string>([
  // Preprocessor
  [TokenType.preproHash, '#'],
  [TokenType.preproMacroFile, '__FILE__'],
  [TokenType.preproMacroLine, '__LINE__'],
  [TokenType.preproMacroDate, '__DATE__'],
  [TokenType.preproMacroTime, '__TIME__'],
  [TokenType.preproMacroTimestamp, '__TIMESTAMP__'],

  // Keywords
  [TokenType.keywordAlignas, 'alignas '],
  [TokenType.keywordAlignof, 'alignof '],
  [TokenType.keywordAuto, 'auto '],
  [TokenType.keywordAtomic, 'atomic '],
  [TokenType.keywordBool, 'bool'],
  [TokenType.keywordBreak, 'break'],
  [TokenType.keywordCase, 'case '],
  [TokenType.keywordChar, 'char'],
  [TokenType.keywordComplex, 'complex '],
  [TokenType.keywordConst, 'const '],
  [TokenType.keywordContinue, 'continue'],
  [TokenType.keywordDefault, 'default'],
  [TokenType.keywordDo, 'do'],
  [TokenType.keywordDouble, 'double'],
  [TokenType.keywordElse, 'else'],
  [TokenType.keywordEnum, 'enum '],
  [TokenType.keywordExtern, 'extern '],
  [TokenType.keywordFloat, 'float'],
  [TokenType.keywordFor, 'for '],
  [TokenType.keywordGeneric, 'generic '],
  [TokenType.keywordGoto, 'goto '],
  [TokenType.keywordIf, 'if '],
  [TokenType.keywordImaginary, 'imaginary'],
  [TokenType.keywordInt, 'int'],
  [TokenType.keywordLong, 'long'],
  [TokenType.keywordNoreturn, 'noreturn'],
  [TokenType.keywordRegister, 'register'],
  [TokenType.keywordRestrict, 'restrict'],
  [TokenType.keywordReturn, 'return'],
  [TokenType.keywordShort, 'short'],
  [TokenType.keywordSigned, 'signed'],
  [TokenType.keywordSizeof, 'sizeof '],
  [TokenType.keywordStatic, 'static '],
  [TokenType.keywordStaticassert, 'static_assert'],
  [TokenType.keywordStruct, 'struct '],
  [TokenType.keywordSwitch, 'switch '],
  [TokenType.keywordThreadlocal, 'thread_local'],
  [TokenType.keywordTypedef, 'typedef '],
  [TokenType.keywordUnion, 'union '],
  [TokenType.keywordUnsigned, 'unsigned '],
  [TokenType.keywordVoid, 'void'],
  [TokenType.keywordVolatile, 'volatile '],
  [TokenType.keywordWhile, 'while '],

  // Operators
  [TokenType.operatorUnaryArithmeticIncrementPrefix, '++'],
  [TokenType.operatorUnaryArithmeticIncrementPostfix, '++'],
  [TokenType.operatorUnaryArithmeticDecrementPrefix, '--'],
  [TokenType.operatorUnaryArithmeticDecrementPostfix, '--'],
  [TokenType.operatorUnaryBitwiseOnesComplement, '~'],
  [TokenType.operatorUnaryLogicalNegation, '!'],
  [TokenType.operatorUnaryPlus, '+'],
  [TokenType.operatorUnaryMinus, '-'],
  [TokenType.operatorBinaryMultiplicationOrIndirection, '*'],
  [TokenType.operatorUnaryDereference, '*'],
  [TokenType.operatorUnaryAddressOf, '&'],
  [TokenType.operatorBinaryArithmeticAddition, ' + '],
  [TokenType.operatorBinaryArithmeticSubtraction, ' - '],
  [TokenType.operatorBinaryArithmeticDivision, ' / '],
  [TokenType.operatorBinaryArithmeticModulo, ' % '],
  [TokenType.operatorBinaryComparisonEqualTo, ' == '],
  [TokenType.operatorBinaryComparisonNotEqualTo, ' != '],
  [TokenType.operatorBinaryComparisonGreaterThan, ' > '],
  [TokenType.operatorBinaryComparisonGreaterThanOrEqualTo, ' >= '],
  [TokenType.operatorBinaryComparisonLessThan, ' < '],
  [TokenType.operatorBinaryComparisonLessThanOrEqualTo, ' <= '],
  [TokenType.operatorBinaryLogicalAnd, ' &&'],
  [TokenType.operatorBinaryLogicalOr, ' ||'],
  [TokenType.operatorBinaryBitwiseAnd, ' & '],
  [TokenType.operatorBinaryBitwiseOr, ' | '],
  [TokenType.operatorBinaryBitwiseXor, ' ^ '],
  [TokenType.operatorBinaryBitwiseShiftLeft, ' << '],
  [TokenType.operatorBinaryBitwiseShiftRight, ' >> '],
  [TokenType.operatorBinaryAssignmentDirect, ' = '],
  [TokenType.operatorBinaryAssignmentAddition, ' += '],
  [TokenType.operatorBinaryAssignmentSubtraction, ' -= '],
  [TokenType.operatorBinaryAssignmentMultiplication, ' *= '],
  [TokenType.operatorBinaryAssignmentDivision, ' /= '],
  [TokenType.operatorBinaryAssignmentModulo, ' %= '],
  [TokenType.operatorBinaryAssignmentBitwiseShiftLeft, ' <<= '],
  [TokenType.operatorBinaryAssignmentBitwiseShiftRight, ' >>= '],
  [TokenType.operatorBinaryAssignmentBitwiseAnd, ' &= '],
  [TokenType.operatorBinaryAssignmentBitwiseOr, ' |= '],
  [TokenType.operatorBinaryAssignmentBitwiseXor, ' ^= '],
  [TokenType.operatorTernaryQuestion, ' ? '],
  [TokenType.operatorEllipses, '...'],
  [TokenType.operatorBitFieldColon, ' : '],
  [TokenType.operatorTernaryColon, ' : '],
  [TokenType.operatorSwitchColon, ':'],
  [TokenType.ambiguousColon, ':'],
  [TokenType.operatorMemberSelectionDirect, '.'],
  [TokenType.operatorMemberSelectionIndirect, '->'],

  // Special
  [TokenType.specialParenthesisOpening, '('],
  [TokenType.specialParenthesisClosing, ')'],
  [TokenType.specialBraceOpening, '{'],
  [TokenType.specialBraceClosing, '}'],
  [TokenType.specialBracketOpening, '['],
  [TokenType.specialBracketClosing, ']'],
  [TokenType.specialComma, ','],
  [TokenType.specialSemicolon, ';'],

  // Ambiguous
  [TokenType.ambiguousPlus, ' + '],
  [TokenType.ambiguousMinus, ' - '],
  [TokenType.ambiguousIncrement, '++'],
  [TokenType.ambiguousDecrement, '--'],
  [TokenType.ambiguousAsterisk, '*'],
  [TokenType.ambiguousAmpersand, '&'],

  // Other
  [TokenType.identifier, ''],
  [TokenType.label, ''],
  [TokenType.constantCharacter, ''],
  [TokenType.constantNumber, ''],
  [TokenType.constantString, ''],
  [TokenType.commentSingleline, ''],
  [TokenType.commentMultiline, ''],
  [TokenType.newline, ''],
]);

export default tokenTypeToValueMap;
